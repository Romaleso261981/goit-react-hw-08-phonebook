{"version":3,"file":"static/js/521.971ca8dc.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.js","components/ContacItem/ContacItem.jsx","components/ContactFilter/ContactFilter.jsx","pages/ContactPage/ContactsPage.jsx"],"sourcesContent":["import { Notify } from 'notiflix';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { createContact } from '../../redux/contacts/operations';\nimport Box from '@mui/material/Box';\nimport TextField from '@mui/material/TextField';\nimport LoadingButton from '@mui/lab/LoadingButton';\nimport SaveIcon from '@mui/icons-material/Save';\nimport { Typography } from '@mui/material';\nimport { useForm } from 'react-hook-form';\n\nexport function ContactForm(props) {\n  const contacts = useSelector(state => state.tasks.items);\n  const dispatch = useDispatch();\n\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: { errors },\n  } = useForm({\n    mode: 'onChange',\n    defaultValues: {\n      name: '',\n      number: '',\n    },\n  });\n\n  const onSubmit = event => {\n    if (contacts.find(contact => contact.name === event.name)) {\n      Notify.warning(`${event.name} is already in contacts`, { color: 'red' });\n    } else {\n      dispatch(createContact(event));\n      reset();\n    }\n  };\n\n  return (\n    <>\n      <Box\n        component=\"form\"\n        onSubmit={handleSubmit(onSubmit)}\n        sx={{\n          '& > :not(style)': { mb: 2, width: '100%' },\n          maxWidth: 400,\n          minHeight: 150,\n          margin: '20px auto',\n          borderRadius: 2,\n          boxShadow: '0px 0px 15px 1px rgba(143, 144, 139, 0.6)',\n          padding: '20px',\n          backgroundColor: 'rgba(255, 255, 255, 0.7)',\n          alignItems: 'center',\n          boxSizing: 'border-box',\n        }}\n      >\n        <Typography sx={{ fontSize: 28 }}>Create contact</Typography>\n        <TextField\n          {...register('name', {\n            required: 'This field is required',\n            maxLength: 30,\n            pattern: {\n              value: /^[а-яёa-z]|[А-Яа-яЁёЇїІіЄєҐґ']+$/iu,\n              message: 'Must contain letters, numbers, ',\n            },\n          })}\n          sx={{ color: 'rgb(194, 120, 118)', width: '80%' }}\n          label=\"Name\"\n          autoFocus\n          error={errors?.name?.message ? true : false}\n          helperText={errors?.name?.message}\n        />\n        <TextField\n          {...register('number', {\n            required: 'This field is required',\n            pattern: {\n              value: /(\\s*)?(\\+)?([- _():=+]?\\d[- _():=+]?){6,14}(\\s*)?/iu,\n              message: 'Must include only numbers, - , () ... length 6-14',\n            },\n          })}\n          label=\"Number\"\n          error={errors?.number?.message ? true : false}\n          helperText={errors?.number?.message}\n        />\n        <LoadingButton\n          type=\"submit\"\n          sx={{\n            bgcolor: 'rgb(146, 80 , 130)',\n            '&:hover': { bgcolor: 'rgb(194, 120, 118)' },\n          }}\n          loadingPosition=\"start\"\n          startIcon={<SaveIcon />}\n          variant=\"contained\"\n        >\n          Save\n        </LoadingButton>\n      </Box>\n    </>\n  );\n}\n","import { useDispatch, useSelector } from 'react-redux';\nimport { removeContact } from '../../redux/contacts/operations';\nimport { Box } from '@mui/material';\nimport List from '@mui/material/List';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemText from '@mui/material/ListItemText';\nimport IconButton from '@mui/material/IconButton';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport { Typography } from '@mui/material';\n\nexport const ContactItem = () => {\n  const contacts = useSelector(state => state.tasks.items);\n  const filter = useSelector(state => state.tasks.items);\n  const dispatch = useDispatch();\n\n  const contactsFilter = () => {\n    return contacts.filter(({ name }) => name.includes(filter));\n  };\n\n  const filtrContacts = contactsFilter();\n\n  const handleDeleteBtn = event => {\n    const currentId = event.currentTarget.id;\n    dispatch(removeContact(currentId));\n  };\n\n  return (\n    <>\n      <Box\n        sx={{\n          maxWidth: 600,\n          margin: '20px auto',\n          borderRadius: 2,\n          boxShadow: '0px 0px 15px 1px rgba(143, 144, 139, 0.6)',\n          padding: '20px',\n          backgroundColor: 'rgba(255, 255, 255, 0.7)',\n          alignItems: 'center',\n          boxSizing: 'border-box',\n        }}\n      >\n        {filtrContacts.length > 0 && (\n          <Typography sx={{ fontSize: 28 }}>Contacts</Typography>\n        )}\n        <List sx={{ width: '100%' }}>\n          {contacts.length > 0 &&\n            contacts.map(({ name, number, id }) => (\n              <ListItem\n                key={id}\n                disableGutters\n                secondaryAction={\n                  <IconButton\n                    aria-label=\"comment\"\n                    id={id}\n                    onClick={handleDeleteBtn}\n                  >\n                    <DeleteIcon />\n                  </IconButton>\n                }\n              >\n                <ListItemText primary={`${name}:`} secondary={number} />\n              </ListItem>\n            ))}\n        </List>\n      </Box>\n    </>\n  );\n};\nexport default ContactItem;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { filteredContacts } from '../../redux/contacts/slice';\nimport { Box, TextField } from '@mui/material';\nimport { Typography } from '@mui/material';\n\nexport const ContactFilter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(state => state.tasks.filter);\n\n  const handleChange = event => {\n    const { value } = event.target;\n    dispatch(filteredContacts(value));\n  };\n\n  return (\n    <>\n      <Box\n        sx={{\n          '& > :not(style)': { mb: 2, width: '100%' },\n          maxWidth: 400,\n          minHeight: 150,\n          margin: '20px auto',\n          borderRadius: 2,\n          boxShadow: '0px 0px 15px 1px rgba(143, 144, 139, 0.6)',\n          padding: '20px',\n          backgroundColor: 'rgba(255, 255, 255, 0.7)',\n          alignItems: 'center',\n          boxSizing: 'border-box',\n        }}\n      >\n        <Typography sx={{ fontSize: 28 }}>Contacts</Typography>\n        <TextField\n          sx={{\n            color: 'rgb(194, 120, 118)',\n            display: 'inline-block',\n            width: '50%',\n          }}\n          id=\"contactFilter\"\n          label=\"Filter\"\n          value={filter}\n          onChange={handleChange}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          fullWidth\n        />\n      </Box>\n    </>\n  );\n};\nexport default ContactFilter;\n","import { ContactForm } from '../../components/ContactForm/ContactForm';\nimport { ContactItem } from '../../components/ContacItem/ContacItem';\nimport { ContactFilter } from '../../components/ContactFilter/ContactFilter';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getContactList } from '../../redux/contacts/operations';\nimport { Typography } from '@mui/material';\nimport Box from '@mui/material/Box';\n\nconst ContactsPage = () => {\n  const filter = useSelector(state => state.tasks.items);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getContactList());\n  }, [dispatch, filter]);\n\n  const contacts = useSelector(state => state.tasks.items);\n  return (\n    <Box>\n      <ContactForm />\n      {contacts.length > 0 && <ContactFilter />}\n      {contacts.length > 0 ? (\n        <ContactItem />\n      ) : (\n        <Typography\n          sx={{\n            fontSize: 45,\n            textAlign: 'center',\n          }}\n        >\n          there is no contact in your phone book\n        </Typography>\n      )}\n    </Box>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["ContactForm","props","contacts","useSelector","state","tasks","items","dispatch","useDispatch","useForm","mode","defaultValues","name","number","register","handleSubmit","reset","errors","formState","Box","component","onSubmit","event","find","contact","Notify","color","createContact","sx","mb","width","maxWidth","minHeight","margin","borderRadius","boxShadow","padding","backgroundColor","alignItems","boxSizing","Typography","fontSize","TextField","required","maxLength","pattern","value","message","label","autoFocus","error","helperText","LoadingButton","type","bgcolor","loadingPosition","startIcon","Save","variant","ContactItem","filter","filtrContacts","includes","handleDeleteBtn","currentId","currentTarget","id","removeContact","length","List","map","ListItem","disableGutters","secondaryAction","IconButton","onClick","Delete","ListItemText","primary","secondary","ContactFilter","display","onChange","target","filteredContacts","fullWidth","useEffect","getContactList","textAlign"],"sourceRoot":""}